var _extends =
  Object.assign ||
  function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };

var graphqlComment = {
  pattern: /#.*/,
  greedy: true
};

var graphqlCommon = {
  string: {
    pattern: /"(?:\\.|[^\\"])*"/,
    greedy: true
  },
  number: /(?:\B-|\b)\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\b/,
  boolean: /\b(?:true|false)\b/,
  variable: {
    pattern: /\$[a-z_]\w*/i,
    greedy: true
  },
  operator: /!|=|\.{3}/,
  punctuation: /[!(){|}[\]:=,]/
};

var graphqlDirective = {
  pattern: /@[a-z_]\w*(\([\w\W]*?\))?/i,
  inside: {
    function: /@[a-z_]\w*/i,
    args: {
      pattern: /\([\w\W]*?\)/,
      inside: _extends(
        {
          arg: /[a-z_]\w*(?=\s*:)/i
        },
        graphqlCommon
      )
    }
  }
};

Prism.languages.graphql = _extends(
  {
    comment: graphqlComment,
    "schema-def": {
      pattern: /\bschema\b[^{]*{[^{}]*}/,
      inside: {
        comment: graphqlComment,
        keyword: /\bschema\b|[a-zA-Z_]\w*(?=\s*:)/,
        "type-name": {
          pattern: /(:[\s\[]*)[a-z_]\w*/i,
          lookbehind: true
        },
        directive: graphqlDirective,
        punctuation: graphqlCommon.punctuation
      }
    },
    "union-def": {
      pattern: /\bunion\b[^=]+=\s*[a-zA-Z_]\w*(?:\s*\|\s*[a-zA-Z_]\w*)*/,
      inside: {
        comment: graphqlComment,
        keyword: /\bunion\b/,
        "type-name": {
          pattern: /([=|]\s*)[a-z_]\w*/i,
          lookbehind: true
        },
        directive: graphqlDirective,
        punctuation: graphqlCommon.punctuation
      }
    },
    "type-def": {
      pattern: /\b(?:type|interface|input|enum)\b[\w\W]+?{(?:[^{}]*|[^{}]*{[^{}]*}[^{}]*|[^{}]*{[^{}]*[^{}]*{[^{}]*}[^{}]*}[^{}]*)}/,
      inside: _extends(
        {
          comment: graphqlComment,
          fields: {
            pattern: /{(?:[^{}]*|[^{}]*{[^{}]*}[^{}]*|[^{}]*{[^{}]*[^{}]*{[^{}]*}[^{}]*}[^{}]*)}/,
            inside: {
              comment: graphqlComment,
              argDefs: {
                pattern: /\([\w\W]*?\)/,
                inside: _extends(
                  {
                    comment: graphqlComment,
                    "attr-name": /[a-z_]\w*(?=\s*:)/i,
                    "type-name": {
                      pattern: /(:[\s\[]*)[a-z_]\w*/i,
                      lookbehind: true
                    },
                    directive: graphqlDirective
                  },
                  graphqlCommon
                )
              },
              directive: graphqlDirective,
              "attr-name": {
                pattern: /[a-z_]\w*(?=\s*[:\(])/i,
                greedy: true
              },
              "type-name": {
                pattern: /(:[\s\[]*)[a-z_]\w*/i,
                lookbehind: true
              },
              punctuation: /[!{}\[\]:=,]/
            }
          },
          keyword: /\b(?:type|interface|implements|input|enum)\b/,
          directive: graphqlDirective
        },
        graphqlCommon
      )
    },
    // string: /"(?:\\.|[^\\"])*"/,
    // number: /(?:\B-|\b)\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\b/,
    // boolean: /\b(?:true|false)\b/,
    // variable: /\$[a-z_]\w*/i,
    // directive: {
    //   pattern: /@[a-z_]\w*/i,
    //   alias: 'function'
    // },
    directive: graphqlDirective,
    "attr-name": /[a-z_]\w*(?=\s*:)/i,
    keyword: [
      {
        pattern: /(fragment\s+(?!on)[a-z_]\w*\s+|\.\.\.\s*)on\b/,
        lookbehind: true
      },
      /\b(?:query|mutation|subscription|fragment|extend|scalar)\b/
    ]
  },
  graphqlCommon
);
